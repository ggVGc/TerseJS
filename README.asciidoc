
TerseJS
-------
This project has a few main goals

* Read/Write less code.
* Generate code that looks hand-written, so it is easy to work on even without the original input.
* Stay a complete superset of standard ES5 JavaScript.

To get a first glimpse of output, try running `tersejs examples.tjs` in this repository.

Currently only runs on linux 64bit. Other platforms should work, if you manage to compile `indentation_to_braces.hs` and put it in `bin`.

=== Main features:

* Indentation sensitivity: Each level of indentation gets transformed into a block between `{` `}`
* Anonymous functions - Courtesy of https://github.com/natefaubion/lambda-chop[lambda_chop] macros
* Function piping

=== Usage:
`bin/tersejs [-o outFile -s <sweet.js options>] infile` +
If no output file is specified with `-o`, result is printed to stdout.


=== Examples:
``` js
// Create unbound functions 
var add = λ(x, y) -> x + y
add(1, 2) === 3;


//Function application
foo $ a, b, c; // Calls foo with arguments a,b,c

// Named functions
fn foo a b
  console.log $ 'Foo called with a='+a+' b='+b

// Chain calls
10 |> foo |> mulBy(2) |> console.log

// Also works with tuples
(a,42, b) |> foo |> bar; // Result: bar(foo(a,42,b));


// Create bound functions 
DB.getResource('foo', λ(err, resp) =>
  if (err)
    err |> prettify |> console.log;
)
 
// Curry functions by leaving off the tupled arguments 
var always = λ x y -> x
always(42)(12) === 42
 
// Mix and match for multiple argument lists 
var nonsense = λ(x, y)(s, t) f -> 42
 
// Placeholders using square brackets and `#` 
var str = λ[#.toString()]
var sub = λ[# - #]
sub(2, 1) === 1;


// Multiply all elements in arr by 2, and print results
(arr, λ[#*2]) |> map |> console.log
 
// Shorthand property lambdas 
var names = arr.map(λ.name)

var foo = λ start
  c = start
  return λ
    ++c
    console.log(c)

```

=== Thanks:

* https://github.com/natefaubion[natefaubion] for writing lambda_chop, and helping me a lot in learning sweet.js.
