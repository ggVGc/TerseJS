
// Object/module definition
// @ is just shorthand for 'self', which is an object returned by the end of a @@-block
// @foo and self.foo are equivalent and both can be used
@@makeFoo start
  c = start
  // lexically scoped
  @printOnInc = true
  // Object property
  @> next
    // Object function property
    ++c;
    if self.printOnInc
      // equivalent to @printOnInc
      console.log| c;

var f = makeFoo| 2;
// Create foo with start=2
f.next!;
// prints 3
f.printOnInc=false;
f.next!; 
// nothing
f.printOnInc=true;
f.next!;
// prints 5

//Function application
foo| m, n
// foo(m, n)

//Shorthand function application with no argument
foo!;
// foo();

//Object cascading
foo.bar...
  ..num = ..memFoo! // foo.bar.num = foo.bar.memFoo();
  var posX = ..pos.x; // var x = foo.bar.pos.x;

// Partial application
var bar = foo~42;
// bar = function(b,c){ return foo(42, b, c); } 

// Named functions
fn foo a b
  console.log| 'Foo with a='+a+' b='+b;

//Function names can be object properties
fn foo.bar x
  console.log("I am foo.bar with value "+x);

// Anonymous functions 
var f = λ x y 
  return x + y;
// function(x,y){return x+y;}/

//use arrow for automatic return
var f = λ x y -> x+y

//lam is a synonym for λ, this also works
var double = lam x -> x*2;

//so is myke...
var newMyke = myke oldMyke -> renew| oldMyke;

// Curry by wrapping arguments in parens
var always = λ(x y) -> x
always(42)(12) === 42;

// Placeholders using square brackets and `#`. Automatic return
var str = λ[#.toString()];
var sub = λ[# - #];
sub(2, 1) === 1;

// Pipe results
10 |> mulBy~2 |> console.log;
// console.log(mulBy2(10))

// Shorthand property lambdas 
var names = arr.map| λ.name;


//do-block, wraps block in (function(){}())
var someGlobalState;
do
  var tmp = 41;
  var tmp2 = tmp+1;
  someGlobalState.update| tmp2;
// tmp and tmp2 not in scope outside of do-block

// Bound functions.
// => arrow makes sure the anonymous function is bound to the current 'this'-value
this.num = 42;
DB.getResource| 'important_thing', λ resp =>
  console.log| "DB responded with "+resp;
  console.log| this.num+" is still 42";
